var D3 = {};
D3.cameraPosY = 0;
var D3Loader = null
  , Model = null
  , FM = null;
THREE.ImageUtils.crossOrigin = "";
Number.prototype.toFixed2 = function(n) {
    var t = Number(this);
    return +t.toFixed(n).toString()
}
,
function() {
    var f, r, n = null, u = null, i = null, t = null, o = null, s = 0, e, h;
    function c(n) {
        var t = n.split(",")
            , i = parseInt(t[0].split("(")[1])
            , r = parseInt(t[1])
            , u = parseInt(t[2].split(")")[0]);
        return "#" + (16777216 + (i << 16) + (r << 8) + u).toString(16).slice(1)
    }
    Model = function Model(n) {
        var t = this;
        t.data = n;
        t.mesh = Zw.loadOne(n);
        t.getDefaultImg = Model.getDefaultImg;
        t.isPerspectiveMode = !1;
        t.__scene = null;
        t.__lightA = null;
        t.__lightB = null;
        t.__camera = null;
        t.__renderer = null;
        t.__controls = null;
        t.__idx = 0;
        t.select = function() {}
        ;
        t.show = function() {}
        ;
        t.singleOut = function() {}
        ;
        t.getCanvas = function() {
            return !t.__renderer ? document : t.__renderer.domElement
        }
        ;
        t.reset = function() {
            return t.__controls.reset(),
            t
        }
    };
    Model.getDefaultImg = function() {
        return "/Diy/ref/gl/Img/11111.png"
    };
    Model.getDefaultImg2 = function() {
        return "/Diy/ref/gl/Img/white.png"
    };
    Model.prototype = {
        changeImageA: function(n, t, i) {
            var r, o;
            Zw.factoryOfTextureAB.isRendering = 1;
            var u = this
              , f = function(n) {
                var t = u.mesh.objA.material.map;
                u.mesh.objA.material.map = n;
                u.mesh.objFold && (u.mesh.objFold.material.map = n);
                t && t.dispose()
            }
              , e = function() {
                Zw.factoryOfTextureAB.isRendering = 0;
                i && i()
            };
            if (!!t) {
                r = Zw.factoryOfTextureAB.canvasA;
                o = Zw.factoryOfTextureAB.contextA;
                r.width = n.width;
                r.height = n.height;
                o.drawImage(n, 0, 0, r.width, r.height, 0, 0, r.width, r.height);
                Zw.LoadCanvasTexture(n, f, e);
                return
            }
            Cm.isNullOrEmpty(n) && (n = this.getDefaultImg());
            Zw.LoadTexture(n, f, e)
        },
        pChangeImageA: function() {
            var n = this;
            return new Promise(function(t) {
                if (!n.mesh) {
                    t && t();
                    return
                }
                Zw.factoryOfTextureAB.isRendering = 1;
                var r = function() {
                    Zw.factoryOfTextureAB.isRendering = 0;
                    t && t()
                }
                  , i = n.mesh.objA.material.map;
                i.needsUpdate = !0;
                i.onUpdate = r
            }
            )
        },
        pChangeImageB: function() {
            var n = this;
            return new Promise(function(t) {
                if (!n.mesh) {
                    t && t();
                    return
                }
                Zw.factoryOfTextureAB.isRendering = 1;
                var r = function() {
                    Zw.factoryOfTextureAB.isRendering = 0;
                    t && t()
                }
                  , i = n.mesh.objB.material.map;
                i.needsUpdate = !0;
                i.onUpdate = r
            }
            )
        },
        changeImageB: function(n, t, i) {
            var r, o;
            Zw.factoryOfTextureAB.isRendering = 1;
            var u = this
              , f = function(n) {
                var t = u.mesh.objB.material.map;
                u.mesh.objB.material.map = n;
                t && t.dispose()
            }
              , e = function() {
                Zw.factoryOfTextureAB.isRendering = 0;
                i && i()
            };
            if (!!t) {
                r = Zw.factoryOfTextureAB.canvasB;
                o = Zw.factoryOfTextureAB.contextB;
                r.width = n.width;
                r.height = n.height;
                o.drawImage(n, 0, 0, r.width, r.height, 0, 0, r.width, r.height);
                Zw.LoadCanvasTexture(n, f, e);
                return
            }
            Cm.isNullOrEmpty(n) && (n = this.getDefaultImg());
            Zw.LoadTexture(n, f, e)
        },
        changeData: function(n) {
            var t = this.mesh.objA.material.map
              , i = this.mesh.objB.material.map;
            this.data = n;
            this.__scene.remove(this.mesh);
            this.mesh = Zw.loadOne(n);
            this.__scene.add(this.mesh);
            this.mesh.objA.material.map = t;
            this.mesh.objB.material.map = i
        },
        toggleMode: function() {
            this.isPerspectiveMode = arguments.length ? arguments[0] : !this.isPerspectiveMode;
            Zw.setPlaneAlpha(this.mesh, this.isPerspectiveMode)
        },
        autoRotateOn: function() {
            !this.__controls || this.__controls.autoRotateOn()
        },
        autoRotateOff: function() {
            !this.__controls || this.__controls.autoRotateOff()
        },
        setSPlanceTexture: function(n) {
            var t = this
              , i = null
              , r = t.mesh.objA.material
              , u = t.mesh.objCal.material;
            i = function(t) {
                if (t.type == "Group" && t.name) {
                    var f = t.name.substr(0, 1);
                    f == "M" ? $.each(t.children, function(n, t) {
                        i(t)
                    }) : (f = "S") && (t.objA.material = n ? u : r)
                }
            }
            ;
            i(t.mesh)
        }
    };
    D3Loader = function() {
        var n = this;
        n.models = [];
        n.controls = {
            autoRotateOff: function() {}
        };
        n.container = document.body;
        n.canvas = null;
        n.size = {
            Width: window.innerWidth,
            Height: window.innerHeight
        };
        n.__idx = 0;
        n.__currentModel = null
    }
    ;
    D3Loader.prototype = {
        init: function() {},
        addLight: function(n) {
            var t, i, u;
            return i = new THREE.HemisphereLight(16777215,16777215,.5),
            i.position.set(0, 50, 0),
            n.add(i),
            this.__lightAIntensity = .3,
            this.__lightBIntensity = .1,
            r = t = new THREE.DirectionalLight(16777215,this.__lightAIntensity),
            r.lookAt(0, 0, 0),
            t.position.set(-1, 1.75, 1),
            t.position.multiplyScalar(30),
            t.castShadow = !1,
            n.add(t),
            n.lights = [i],
            n.lights
        },
        addLinde: function(n, t, i, r, u) {
            var o = new THREE.LineBasicMaterial({
                color: u
            }), f = new THREE.Geometry, e;
            f.vertices.push(t);
            f.vertices.push(i);
            f.vertices.push(r);
            e = new THREE.Line(f,o);
            n.add(e)
        },
        add: function(t, r) {
            var f;
            r !== !0 && (r = !1);
            this.models.push(t);
            f = this;
            n || (n = new THREE.WebGLRenderer({
                canvas: f.canvas,
                antialias: !0,
                alpha: !0,
                preserveDrawingBuffer: !0
            }),
            n.setSize(this.size.Width, this.size.Height));
            n.setSize(this.size.Width, this.size.Height);
            i = new THREE.Scene;
            o = new THREE.AxesHelper(500);
            o.visible = !1;
            D3.scene.add(o);
            i.add(t.mesh);
            var e = this.addLight(i)
              , s = this.size.Width / this.size.Height;
            u = new THREE.PerspectiveCamera(45,s,.5,2e4);
            u.position.set(0, D3.cameraPosY, 670);
            u.lookAt(i.position);
            t.parent = f;
            t.__scene = i;
            t.__lights = e;
            t.__camera = u;
            t.__renderer = n;
            t.__controls = new THREE.TrackballControls(t.__camera,f.canvas,e);
            t.__idx = this.__idx++;
            t.select = function() {
                f.select(t)
            }
            ;
            t.show = function() {
                f.show(t)
            }
            ;
            t.singleOut = function() {
                f.singleOut(t)
            }
            ;
            t.getCanvas = function() {
                return n.domElement
            }
            ;
            r || this.select(t)
        },
        del: function(n) {
            for (var t = 0; t < this.models.length; t++)
                if (n.__idx == this.models[t].__idx) {
                    this.models.splice(t, 1);
                    break
                }
            !n.__controls || (n.__controls.isControls = !1);
            this.models.length > 0 ? this.select(this.models[0]) : this.__currentModel = null
        },
        changeLightA: function(n) {
            this.__lightAIntensity = n;
            r.intensity = n
        },
        changeLightB: function(n) {
            this.__lightBIntensity = n;
            $.each(this.__currentModel.__scene.lights, function(t, i) {
                i.intensity = n
            })
        },
        changeSize: function(t, i) {
            t = t || D3.D3Loader.canvas.width;
            i = i || D3.D3Loader.canvas.height;
            this.size.Width = t;
            this.size.Height = i;
            n.setSize(t, i);
            u.aspect = t / i;
            u.updateProjectionMatrix()
        },
        changeOtherRendererSize: function(n, t) {
            for (var i = 0; i < this.models.length; i++) {
                this.models[i].__renderer.setSize(n, t);
                var r = n / t;
                this.models[i].__camera.aspect = r;
                this.models[i].__camera.near = .6;
                this.models[i].__camera.far = 2e4
            }
        },
        select: function(n) {
            if (typeof n == "number") {
                if (n > this.models.length - 1) {
                    alert("out of range!");
                    return
                }
                n = this.models[n]
            }
            this.show(n);
            var t = this.current();
            !t || (t.__controls.isControls = !1);
            this.controls = n.__controls;
            this.controls.isControls = !0;
            this.__currentModel = n
        },
        singleOut: function(n) {
            if (!n || !n.__camera) {
                console.log("执行singleOut()方法时，模型不存在或者未加入场景");
                return
            }
            for (var t = 0; t < this.models.length; t++)
                n.__idx == this.models[t].__idx ? n.__renderer.domElement.style.display = "" : this.models[t].__renderer.domElement.style.display = "none";
            this.select(n)
        },
        show: function(n) {
            if (!n || !n.__camera) {
                console.log("执行show()方法时，模型不存在或者未加入场景");
                return
            }
            n.__renderer.domElement.style.display = ""
        },
        showAll: function() {
            for (var n = 0; n < this.models.length; n++)
                this.models[n].__renderer.domElement.style.display = ""
        },
        refresh: function() {
            for (var t, n = this.models.length - 1; n >= 0; n--)
                t = this.models[n],
                this.del(t),
                this.add(t)
        },
        current: function() {
            return this.__currentModel
        },
        __lin: null,
        animate: function() {
            var t, n, i;
            if (D3.beforeAnimate && D3.beforeAnimate(),
            t = this,
            D3._animateTS) {
                if (+new Date - D3._animateTS >= 20) {
                    for (D3._animateTS = +new Date,
                    n = 0; n < this.models.length; n++)
                        if (this.models[n].__renderer && this.models[n].__controls) {
                            //!this.models[i].movie || 
                            this.models[n].__renderer.render(this.models[n].__scene, this.models[n].__camera);
                            this.models[n].__controls.update()
                        }
                    if (!r || !t.__currentModel || !t.__currentModel.__camera)
                        return;
                    r.position.x = 2 * t.__currentModel.__camera.position.x;
                    r.position.y = 2 * t.__currentModel.__camera.position.y;
                    r.position.z = 2 * t.__currentModel.__camera.position.z
                }
            } else
                D3._animateTS = +new Date;
            D3.afterAnimate && D3.afterAnimate();
            D3.autoCenter && _.get(D3, "curModel") && (D3.curModel.mesh.position.set(0, 0, 0),
            i = (new THREE.Box3).setFromObject(D3.curModel.mesh),
            i.max.add(i.min).multiplyScalar(-.5),
            D3.curModel.mesh.position.set(i.max.x, i.max.y, i.max.z));
            D3._animateID = requestAnimationFrame(function() {
                t.animate()
            })
        },
        stopAnimate: function() {
            D3._animateID !== null && (cancelAnimationFrame(D3._animateID),
            D3._animateID = null)
        }
    };
    FM = function() {
        var n = this;
        n.__defaultTweenOpt = {
            easing: [],
            delay: 0,
            time: 5e3
        };
        n.__cacheTween = [];
        n.c = {};
        n.__frames = [];
        n.curTw = null;
        n.arrEasing = ["Back", "Bounce", "Circular", "Cubic", "Elastic", "Exponential", "Quadratic", "Quartic", "Quintic", "Sinusoidal"];
        n.arrInOrOut = ["In", "Out", "InOut"];
        FM.__current = n
    }
    ;
    FM.prototype = {
        getEmptyFrame: function() {
            return {
                name: 0,
                fold: 0,
                roX: 0,
                roY: 0,
                roZ: 0,
                panX: 0,
                panY: 0,
                zoom: 1
            }
        },
        getEasing: function(n) {
            var u = this;
            n || (n = []);
            var i = n[0]
              , r = n[1]
              , t = TWEEN.Easing[_.isNumber(i) ? u.arrEasing[i] : i];
            return t && (t = t[_.isNumber(r) ? u.arrInOrOut[r] : r],
            t) ? t : TWEEN.Easing.Linear.None
        },
        getLastFrame: function() {
            var n = this;
            return n.__frames.length ? _.last(n.__frames) : n.getEmptyFrame()
        },
        addFrame: function(n) {
            var t = this
              , i = {};
            return _.extend(i, t.getLastFrame(), n),
            t.__frames.push(i),
            t
        },
        addFrames: function(n) {
            var t = this;
            return _.forEach(n, function(n) {
                t.addFrame(n)
            }),
            t
        },
        setDefaultTweenOpt: function(n) {
            var t = this;
            return _.extend(t.__defaultTweenOpt, n),
            t
        },
        setCurrent: function(n) {
            var t = this;
            return t.curTw = _.clone(_.find(t.__frames, {
                name: n
            })),
            t
        },
        runTo: function(n) {
            function u() {
                TWEEN.update() && requestAnimationFrame(u)
            }
            var t = this, i, r;
            return t.stop(),
            __cacheTween = [],
            i = _.extend({}, t.__defaultTweenOpt, _.pick(n, _.keys(t.__defaultTweenOpt))),
            _.forEach(n.arr, function(n) {
                var e, o, u;
                if (!t.curTw) {
                    t.setCurrent(n);
                    return
                }
                if (e = _.find(t.__cacheTween, {
                    __frameName: n
                }),
                e) {
                    r.chain(e);
                    return
                }
                o = _.clone(_.find(t.__frames, {
                    name: n
                }));
                u = new TWEEN.Tween(t.curTw).easing(t.getEasing(i.easing)).to(o, i.time).delay(i.delay).onUpdate(function() {
                    D3.vue.fold = this.fold;
                    D3.roX(0).roX(this.roX, 1).roY(this.roY, 1).roZ(this.roZ, 1).zoom(this.zoom).pan(this.panX, this.panY);
                    f && _.extend(f, this)
                });
                u.__frameName = n;
                r && r.chain(u);
                r = u;
                t.__cacheTween.push(u)
            }),
            t.__cacheTween[0].start(),
            u(),
            t
        },
        stop: function() {
            var n = this;
            return _.forEach(n.__cacheTween, function(n) {
                n.stop()
            }),
            n.__cacheTween = [],
            n
        }
    };
    D3.init = function(r) {
        function g() {
            if (v)
                return v;
            var n = 256
              , t = new TG.Texture(n,n).add((new TG.CheckerBoard).size(32, 32).tint(.5, 0, 0)).set(new TG.SineDistort)
              , i = t.toCanvas();
            return v = i.toDataURL()
        }
        function nt() {
            var t, i, n;
            h ? h.del(h.current()) : (h = new D3Loader,
            u.D3Loader = h,
            u.opt.el_3d && (h.container = document.querySelector(u.opt.el_3d)),
            h.container.tagName == "CANVAS" ? h.canvas = h.container : (t = document.createElementNS("http://www.w3.org/1999/xhtml", "canvas"),
            h.canvas = t,
            $(h.container).html(""),
            $(h.container).append(t)),
            h.fitSize = function() {
                h.size.Width = $(h.container).width();
                h.size.Height = $(h.container).height()
            }
            ,
            h.fitSize(),
            h.init(),
            h.animate(),
            Model.getDefaultImg = g);
            i = _.get(y, "box3D");
            n = new Model(_.isPlainObject(i) ? i : eval("(" + y.Box3D + ")"));
            h.add(n, !0);
            o.position.set(n.mesh.position.x, n.mesh.position.y, n.mesh.position.z);
            u.opt.currentTexture ? n.changeImageA(u.opt.currentTexture(Zw.BoxW, Zw.BoxH)) : u.opt.defaultTexture && n.changeImageA(u.opt.defaultTexture(Zw.BoxW, Zw.BoxH));
            n.autoRotateOff();
            n.select()
        }
        function tt(n) {
            var f = function(t) {
                try {
                    y = t;
                    nt()
                } catch (i) {
                    console.log("盒型加载出错！");
                    throw "Wrong in load box!";
                }
                n && n()
            }, t = _.pick(u.opt, ["boxID", "boxPms"]), e = _.find(u.__cacheBoxData, t), i, r, o;
            if (e) {
                f(e.data);
                return
            }
            i = function(n) {
                t.data = n;
                _.remove(u.__cacheBoxData, function(n) {
                    n.boxID == t.boxID && n.boxPms == t.boxPms
                });
                u.__cacheBoxData.push(t);
                f(n)
            }
            ;
            r = u.opt.boxData;
            r ? i(r) : (o = new Cm.MyPost,
            o.Post({
                url: "/uc/LinTest3D",
                data: {
                    boxid: u.opt.boxID,
                    boxPms: u.opt.boxPms,
                    getBoxJson: !!u.opt.getBoxJson,
                    getLineExp: !!u.opt.getLineExp
                },
                success: i
            }))
        }
        function d(n) {
            requestAnimationFrame(d);
            TWEEN.update(n + b)
        }
        function ut() {
            a && a.stop();
            var n = D3.curModel.mesh, r = _.throttle(function() {t.fold = l.v}, 20)
              , i = u.opt.timeOfFold;
            b = t.fold * i + k;
            a = new TWEEN.Tween(l).to(w, i).repeat(Infinity).delay(k).yoyo(!0).onUpdate(function() {
                r();
                n.setPercent(l.v);
                n.doFoldOrExpond()
            });
            _.extend(l, it);
            _.extend(w, rt);
            a.start()
        }
        var c, a;
        s = 0;
        var u = D3, v, y, h = null, p = null;
        u.opt = {
            el_3d: null,
            el_vue: null,
            el_vue_mixins: null,
            boxID: null,
            boxPms: null,
            defaultTexture: null,
            currentTexture: null,
            timeOfFold: 8e3,
            el_vue_html: null,
            boxData: null,
            getLineExp: 0,
            getBoxJson: 0,
            isDebug: 0
        };
        _.extend(u.opt, r);
        u.opt.el_vue_html = $(u.opt.el_vue).html();
        u.__cacheBoxData = [];
        u.load = function(n, r) {
            s = 0;
            THREE.Cache.clear();
            var o = _.get(D3, "D3Loader.__currentModel");
            return o && (Zw.Cache = {
                model: o,
                clear: function() {
                    var n = this.model.mesh;
                    n.objA.material.map.dispose();
                    n.objB.material.map.dispose();
                    n.objFold.material.map.dispose();
                    n.remove();
                    Zw.Cache = null
                }
            }),
            _.extend(u.opt, n),
            u.opt.isDebug && (f = new (Vue.extend({
                template: "<div><\/div>",
                data: function() {
                    return c
                },
                watch: {
                    $data: {
                        handler: function() {
                            u.onFrameChanged && u.onFrameChanged(c)
                        },
                        deep: 1
                    }
                }
            }))),
            tt(function() {
                $(u.opt.el_vue).html(u.opt.el_vue_html);
                u.vue && _.isFunction(u.vue.$destroy) && u.vue.$destroy();
                p = _.clone(u.D3Loader.__currentModel.__camera.position);
                u.vue = new Vue({
                    el: u.opt.el_vue,
                    mixins: u.opt.el_vue_mixins,
                    data: t,
                    watch: {
                        autoFold: function(n) {
                            n ? ut() : a && (a.stop(),
                            b = 0)
                        },
                        autoRotate: function(n) {
                            n ? h.__currentModel.autoRotateOn() : h.__currentModel.autoRotateOff()
                        },
                        isPerspectiveMode: function(n) {
                            h.current().toggleMode(n)
                        },
                        sidePlaneBlank: function(n) {
                            h.current().setSPlanceTexture(n)
                        },
                        fold: function(n) {
                            (f && (f.fold = n),
                            D3.afterFold && D3.afterFold(),
                            this.autoFold) || (l.v = n,
                            h.current().mesh.setPercent(l.v),
                            h.current().mesh.doFoldOrExpond())
                        },
                        light1: function(n) {
                            h.changeLightA(n / 100) + .3
                        },
                        light2: function(n) {
                            h.changeLightB(n / 100) + .5
                        }
                    },
                    methods: {
                        resetView: function() {
                            u.roX(0, 0)
                        }
                    }
                });
                var n = u.vue.$nextTick();
                !n || n.then(function() {
                    t.light1 = 43;
                    t.light2 = 40;
                    t.autoRotate = 0;
                    u.roX(0)
                });
                i.onAfterRender = function() {
                    Zw.__renderAB = Zw.__renderAB || 0;
                    Zw.__renderAB += 10;
                    Zw.__renderAB >= 20 && (Zw.__renderAB = 0,
                    Zw.Cache && Zw.Cache.clear(),
                    _.isFunction(r) && setTimeout(r, 10),
                    i.onAfterRender = e,
                    s = 1,
                    D3.afterRender && D3.afterRender())
                }
            }),
            u
        }
        ;
        u.dispose = function() {
            v = null;
            y = null;
            h = null;
            p = null;
            TWEEN.removeAll();
            n = null
        }
        ;
        u.getBoxDataFromCache = function(n, t) {
            var i = _.find(u.__cacheBoxData, {
                boxID: n,
                boxPms: t
            });
            return i ? i.data : null
        }
        ;
        u.rotate = function(n, t, i) {
            return u.D3Loader.__currentModel.__camera.__linRotate(n, t, i),
            u
        }
        ;
        u.zoom = function(n) {
            var t = p, i, r;
            return n > 0 && t && (n = 1 / n,
            i = t.length() * n,
            r = D3.D3Loader.__currentModel.__camera.position.length(),
            D3.D3Loader.__currentModel.__camera.position.multiplyScalar(i / r)),
            u
        }
        ;
        u.pan = function(n, t) {
            return u.D3Loader.__currentModel.__camera.__linPan(n, t),
            u
        }
        ;
        u.roY = function(n, t) {
            return u.rotate(new THREE.Vector3(0,1,0), n, t),
            u
        }
        ;
        u.roX = function(n, t) {
            return u.rotate(new THREE.Vector3(1,0,0), n, t),
            u
        }
        ;
        u.roZ = function(n, t) {
            return u.rotate(new THREE.Vector3(0,0,1), n, t),
            u
        }
        ;
        u.showFrame = function(n) {
            var t = (new FM).getEmptyFrame();
            _.extend(t, n);
            _.extend(c, t);
            c.roX %= 360;
            c.roY %= 360;
            c.roZ %= 360;
            u.vue.fold = t.fold;
            u.roX(0).roX(t.roX, 1).roY(t.roY, 1).roZ(t.roZ, 1).zoom(t.zoom).pan(t.panX, t.panY)
        }
        ;
        t = {
            autoFold: 0,
            autoRotate: 0,
            isPerspectiveMode: 0,
            sidePlaneBlank: 0,
            fold: 0,
            light1: 0,
            light2: 0
        };
        c = {
            roX: 0,
            roY: 0,
            roZ: 0,
            zoom: .8,
            panX: 0,
            panY: 0,
            fold: 0
        };
        u.changeFm = function(n, t, i) {
            if (f) {
                var r = _.clone(c);
                return t = +t,
                i = +i,
                i == 0 ? r[n] = t : i > 0 ? r[n] += t : r[n] -= t,
                u.showFrame(r),
                u
            }
        }
        ;
        u.onFrameChanged = function() {
            var n = [];
            _.each(c, function(t, i) {
                n.push(i + ":" + (+t).toFixed2(2))
            });
            console.log(11, n.join(","))
        }
        ;
        u.vue = null;
        u.changeImageA = function(n, t, i) {
            return u.D3Loader.__currentModel.changeImageA(n, t, i),
            u
        }
        ;
        u.changeImageB = function(n, t, i) {
            return u.D3Loader.__currentModel.changeImageB(n, t, i),
            u
        }
        ;
        u.lock = function() {
            return u.D3Loader.__currentModel.__controls.enabled = !1,
            u
        }
        ;
        u.unlock = function() {
            return u.D3Loader.__currentModel.__controls.enabled = !0,
            u
        }
        ;
        u.changeSize = function(n, t) {
            return u.D3Loader.changeSize(n, t),
            u
        }
        ;
        u.refresh = function() {
            return u.D3Loader.refresh(),
            D3.D3Loader.__currentModel.__controls.autoRotate = t.autoRotate,
            u
        }
        ;
        var k = 300
          , l = {
            v: 0
        }
          , w = {
            v: 1
        }
          , it = _.clone(l)
          , rt = _.clone(w)
          , b = 0;
        return requestAnimationFrame(d),
        u
    };
    e = function() {};
    D3.afterAnimate = e;
    D3.beforeAnimate = e;
    D3.afterFold = e;
    D3.afterRender = e;
    D3.autoCenter = !0;
    D3.getChangeAxesHelper = function() {
        var f = [];
        try {
            if (!D3.helper)
                return;
            var c = D3.curModel.mesh
              , n = c.position
              , t = (new THREE.Box3).setFromObject(c)
              , e = t.max.x
              , o = t.max.y
              , s = t.max.z
              , i = t.min.x
              , r = t.min.y
              , u = t.min.z
              , h = 50;
            e = e - n.x + h;
            o = o - n.y + h;
            s = s - n.z + h;
            i -= n.x;
            r -= n.y;
            u -= n.z;
            f = [i, r, u, e, r, u, i, r, u, i, o, u, i, r, u, i, r, s];
            D3.helper.geometry.addAttribute("position", new THREE.Float32BufferAttribute(f,3))
        } catch (l) {}
        return f
    }
    ;
    h = function(n) {
        var u, i, r, t;
        if (n = n.toLowerCase(),
        u = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/,
        n && u.test(n)) {
            if (n.length === 4) {
                for (i = "#",
                t = 1; t < 4; t += 1)
                    i += n.slice(t, t + 1).concat(n.slice(t, t + 1));
                n = i
            }
            for (r = [],
            t = 1; t < 7; t += 2)
                r.push(parseInt("0x" + n.slice(t, t + 2)));
            return r
        }
        return [0, 0, 0]
    }
    ;
    Cm.createGetterSetter(D3, "colorRgb", function() {
        return h
    });
    Cm.createGetterSetter(D3, "colorRGBtoHex", function() {
        return c
    });
    Cm.createGetterSetter(D3, "isLoaded", function() {
        return s
    });
    Cm.createGetterSetter(D3, "control", function() {
        return t
    });
    Cm.createGetterSetter(D3, "camera", function() {
        return u
    });
    Cm.createGetterSetter(D3, "renderer", function() {
        return n
    });
    Cm.createGetterSetter(D3, "scene", function() {
        return i
    });
    Cm.createGetterSetter(D3, "helper", function() {
        return o
    });
    Cm.createGetterSetter(D3, "curModel", function() {
        return D3.D3Loader.__currentModel
    });
    Cm.createGetterSetter(D3, "pChangeImageA", function() {
        return _.bind(D3.curModel.pChangeImageA, D3.curModel)
    });
    Cm.createGetterSetter(D3, "pChangeImageB", function() {
        return _.bind(D3.curModel.pChangeImageB, D3.curModel)
    });
    Cm.createGetterSetter(D3, "factoryOfTextureAB", function() {
        return Zw.factoryOfTextureAB
    });
    Cm.createGetterSetter(D3, "curData", function() {
        var n = _.pick(D3.opt, ["boxID", "boxPms"]);
        return _.find(D3.__cacheBoxData, n)
    });
    Cm.createGetterSetter(D3, "boxInfo", function() {
        return {
            width: Zw.BoxW,
            height: Zw.BoxH,
            cal: Zw.Cal,
            minX: Zw.Left,
            minY: Zw.Top
        }
    })
}();
